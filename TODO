
			       Hotlist

- Follow what `edit-env' does, in order to make chess-query.el

- Make ( create variations in a display, and C-f and C-b move into and
  out of them

- Find a way that regexp-alist entries that only need to fire once are
  only scanned once.

- Add support for ICS observing

- Use server-side sockets in chess-network, if Emacs supports it

- Allow ASCII displays to use a separate frame

- Still need to test many areas: position editing

- In chess-ics.el, setup a completion function based on handles

- Break chess-legal-plies into two parts, one of which would be the
  inverse of chess-search-position, and would live in chess-pos.el

- Have elp.el not instrument defsubst functions; it obscures the
  results too much

----------------------------------------------------------------------

			      To-do List

- Copy some of ics.el's nicer functionality into chess-ics.el

- Need to implement the "50 moves after irreversible" draw rule

- The game should go inactive once I lose by stalemate/checkmate

- When a clock runs down, indicate this in the modeline, and all the
  user to call-flag in order to win on time

- Detect draw/resign/abort/retract, etc., from ICS and common engines

- in chess-engine-filter and chess-ics-filter, if an error is
  encountered, skip that line so the same error isn't triggered again

- SPACE to pass, then try to move (against an engine) fails saying:
  it's not our turn to move

- Add support for adjournments; also, implement this is such a way
  that an e-mail or postal game is basically a game that's adjourned
  after every move; use BBDB if available

- Allow databases to return a game moniker, which can be used to
  reference that game again

- There needs to be much more robustness; it's too easy to get the
  game into an unplayable state right now

- Break my dependency on cl

- Use more asserts throughout the code

- Read-only mode needs to be more vigorous.  There's nothing
  preventing the user from using M-x commands.

- Complete chess-pgn-mode's automatic entry, using chess-input, and
  making space/return perform the move

- Use MIME attachments (application/x-chess-pgn) for sending e-mail
  chess games back and forth.

- In edit mode, mouse-2 and mouse-3 should provide a drop-down list of
  pieces the square can be set to.  Cursor movement is really not the
  best for chess-images.  I still need to figure out how best to
  handle cursor-type with that display.

- Implement engine options; then, in chess-puzzle set the option that
  tells the engine not to resign.

- Remote displays are horribly insecure.

----------------------------------------------------------------------

			       Training

- Write a scripted chess-tutorial.

- Allow the opponent to give hints.

- Add a warning mode that will use the results of an analysis to warn
  the user (and ask for confirmation) before doing something that
  might lead to an inferior position.

- Add a chess tutor program, to teach people how to play chess

----------------------------------------------------------------------

			  Analysis features

- Add an engine function for obtaining an evaluation of the current
  position.  Then, allow M-x chess to startup a non-game oriented
  engine, solely for the purpose of submitting position evaluations,
  and displaying the result in the modeline.  (Also, look at crafty's
  kibitzing feature).

- Add a Map command, that will colorize the squares depending on
  whether they are reachable by either side.  Green if reachable by
  you, Red if by your opponent, and blue if by both.  With a prefix
  argument, colorize only the squares that have pieces on them.  This
  is a stable modes that remains in effect until turned off.  It also
  requires the ability to pass a color to the chessboard highlighting
  routine.

- Using gnuplot-mode, allow evaluation trends to be plotted

- Add an analyze command that will indicate which pieces are defended,
  how well, which are attacked, which moves would increase
  defense/attack/both, etc.  Basically, everything that can be known
  about the current board, and one move ahead (on both sides).

----------------------------------------------------------------------

			   Other variations

Need a way to play bughouse/crazyhouse games.

----------------------------------------------------------------------

			 BEFORE FINAL RELEASE

  port the code to XEmacs
  profile
  mem profile
  docstring
  texi
  elint
  checkdoc
