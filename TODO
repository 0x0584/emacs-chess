delYsid: I knew there had to be a way.  The old keyboard shortcutting
code (which uses chess-legal-plies) was just to slow.  On modern
machines you wouldn't notice it, but on my 300 MHz laptop in battery
saving mode, even with byte-compiled files, I spent 1/4 of my time
looking at the hourglass cursor.  So I kept cleaning the algorithm,
dropping the number of calls to chess-search-position (the biggest and
slowest function in chess.el) from 5400 calls down to 4300 calls.  But
still it was too slow.  Then I thought about it long and hard, and
realized chess-legal-plies was going about its whole job backwards.  I
found a way to optimize it that resulted in dropping the number of
calls to chess-search-position down to 797!!  That's 5000 fewer calls.
The new code is so fast I that when it's byte-compiled, I never see an
hourglass cursor, rarely even when un-byte-compiled in my slowest
configuration!

- Feature work remaining:

  annotations
  chatting
  clocks
  bughouse/crazyhouse
  analysis/highlight tools
  database interaction (chess-file.el, chess-scid.el)

----------------------------------------------------------------------

- undoing a single move (my move) and moving again, causes
  chess-algebraic to get a little screwed up

- the game should go inactive once I lose by stalemate/checkmate

- detect draw/resign/abort/retract, etc., from ICS and common engines

- in chess-engine-filter and chess-ics-filter, if an error is
  encountered, skip that line so the same error isn't triggered again

----------------------------------------------------------------------

- Add support for adjournments; also, implement this is such a way
  that an e-mail or postal game is basically a game that's adjourned
  after every move

- There needs to be much more robustness; it's too easy to get the
  game into an unplayable state right now

- Break my dependency on cl

- Use more asserts throughout the code

- Read-only mode needs to be a bit more vigorous.  There's nothing
  preventing the user from using M-x commands.

- Add an engine function for obtaining an evaluation of the current
  position.  Then, allow M-x chess to startup a non-game oriented
  engine, solely for the purpose of submitting position evaluations,
  and displaying the result in the modeline.  (Also, look at crafty's
  kibitzing feature).

- Complete chess-pgn-mode

- Write a chess-database.el interface, and then add chess-lisp.el,
  chess-file.el (PGN games in a flat file) and chess-scid.el

- Use MIME attachments (application/x-chess-pgn) for sending e-mail
  chess games back and forth.  Add code for special MIME handling of
  this type in Gnus.

- Copy some of ics.el's nicer functionality into chess-ics.el

- Add support for ICS observing

- Make the mode-line much more informative, with information on who is
  playing, etc.

- Turn on memory gc collection messages, and see how much of a pig
  chess.el is

- Make as much of chess-game/ply/pos, etc., defsubst as possible.

- Create a series of generic functions and predicates, so that users
  can say (chess-position OBJECT) or (chess-move OBJECT), without
  needing to know the type of OBJECT.

- Change chess-display-set-... to chess-display-set, and make it use
  the new generic functions.

- Use server-side sockets in chess-network, if Emacs supports it

- Support auto-saving of games to PGN, and saving them at appropriate
  points; this will require database interaction support

- Allow ASCII displays to use a separate frame

- In edit mode, mouse-2 and mouse-3 should provide a drop-down list of
  pieces the square can be set to.  Cursor movement is really not the
  best for chess-images.  I still need to figure out how best to
  handle cursor-type with that display.

- Still need to test many areas: position editing

- Implement engine options; then, in chess-puzzle set the option that
  tells the engine not to resign.

- Add a display command for writing out the currently displayed game
  to a file.  It will use PGN for games, and FEN for positions.

- Remote displays are horribly insecure.

- When editing the board in display mode (or doing speculative moves),
  doing them on a copy of the board with no hook except the display
  hook.  Then, if you like the result, it call be a `set' on the
  original board from the copied board.

- Resize the chess board on a window resize event, if possible.

- Add chess-game-strip-annotations, for removing all annotations from
  a game object

- Add a module for chatting between opponents

- Let the user specify a default size for the chess-images display

- Need to check for chess engine resignations

- Need a chess-clock.el module, especially for playing on ICS

- Port image display code to XEmacs

- Support chess by mail, with direct tie-ins to Gnus/RMAIL.

- Allow the opponent to give hints.

- Add a command that will load a saved game, continue it, and then
  enter a move for whichever color is next to play.  This would make
  it trivial to add chess drivers to AIM, IRC, etc.  The mere command
  "!chess johnw37 Nf3" would mean: load the chess game johnw37, and
  make my move as Nf3.  It would also make chess by e-mail a snap to
  implement.

- Add an analyze command that will indicate which pieces are defended,
  how well, which are attacked, which moves would increase
  defense/attack/both, etc.  Basically, everything that can be known
  about the current board, and one move ahead (on both sides).

- Add a warning mode that will use the results of an analysis to warn
  the user (and ask for confirmation) before doing something that
  might lead to an inferior position.

- Create chess-player.el, which creates persistent objects that
  encapsulate information about any player: where he is, his name, his
  opponent type, etc.  This would maintain a log of games against that
  player, their current chess rating, etc.  Then, M-x chess would ask
  you for a player, not an opponent.

- Add a Map command, that will colorize the squares depending on
  whether they are reachable by either side.  Green if reachable by
  you, Red if by your opponent, and blue if by both.  With a prefix
  argument, colorize only the squares that have pieces on them.  This
  is a stable modes that remains in effect until turned off.  It also
  requires the ability to pass a color to the chessboard highlighting
  routine.

- If a person selects a piece with the mouse, then uses right-click to
  designate a target square, display the resulting board without
  making a move.  This requires copying chessboard-current-board to
  chessboard-draft-board.  If the user right-clicks without selecting
  a piece, it will reset to chessboard-current-board and redraw.

- Using gnuplot-mode, allow evaluation trends to be plotted

			 BEFORE FINAL RELEASE

profile, mem profile, doc, lint, checkdoc
